apply plugin: 'com.android.library'

android {

    lintOptions {
        abortOnError false
    }

    compileSdkVersion parent.ext.androidCompileSdkVersion
    buildToolsVersion parent.ext.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion parent.ext.androidMinSdkVersion
        targetSdkVersion parent.ext.androidTargetSdkVersion
    }

    sourceSets {
    main {
        jni.srcDirs = [] // Prevent gradle from building native code with ndk; we have our own Makefile for it.
        jniLibs.srcDir 'jni/libs' // Where generated .so files are placed.
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
    }
}


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

/*
 * Include GDB files into apk
 */
afterEvaluate {
    Sync packageTask = project.getTasks().findByName("packageReleaseJniLibs")
    packageTask.include(['**/gdbserver', '**/gdb.setup'])
}

class BuildNative extends Exec {}

tasks.withType(BuildNative){
    /*
    Properties set for Android Studio own shell.
    when you run gradlew from cli, OS shell env variables will be used

    To be able to build from Android Studio, you have to set ndk.dir & sdk.dir
    properties in local.properties in the root folder, like this (for example):
    sdk.dir=/home/<username>/SDK/android-sdk-linux
    ndk.dir=/home/<username>/SDK/android-ndk-r10b
     */
    if (System.getenv('ANDROID_SDK') == null || System.getenv('ANDROID_NDK') == null) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        environment 'ANDROID_NDK', properties.getProperty('ndk.dir')
        environment 'ANDROID_SDK', properties.getProperty('sdk.dir')
    }
    workingDir '..'
    commandLine './compile-libvlc.sh'
}

task buildDebugARMv5(type:BuildNative) {
    args('-a', "armeabi-v5")
}
task buildDebugARMv6(type:BuildNative) {
    args('-a', "armeabi")
}
task buildDebugARMv6_nofpu(type:BuildNative) {
    args('-a', "armeabi-nofpu")
}
task buildDebugARMv7(type:BuildNative) {
    args('-a', "armeabi-v7a")
}
task buildDebugARM64(type:BuildNative) {
    args('-a', "arm64-v8a")
}
task buildDebugx86(type:BuildNative) {
    args('-a', "x86")
}
task buildDebugx86_64(type:BuildNative) {
    args('-a', "x86_64")
}
task buildDebugMIPS(type:BuildNative) {
    args('-a', "mips")
}
task buildDebugMIPS64(type:BuildNative) {
    args('-a', "mips64")
}




apply plugin: 'maven'
group = 'org.sensi'
version = '0.1'

archivesBaseName = 'sensicationlibvlclibrary'


uploadArchives {
    repositories {
        mavenDeployer {
            repository url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
        }
    }
}
task install(dependsOn: uploadArchives)

//...
//...
task ressourcesJar(type: Jar) {
    classifier = 'res'
    from android.sourceSets.main.res.sourceFiles
}
task javasourcesJar(type: Jar) {
    classifier = 'java'
    from android.sourceSets.main.java.sourceFiles
}
artifacts {
    archives ressourcesJar
    archives javasourcesJar
}
