apply plugin: 'com.android.application'
apply from: "${rootDir}/android_common.gradle"
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion parent.ext.androidCompileSdkVersion
    buildToolsVersion parent.ext.androidBuildToolsVersion


    flavorDimensions "target", "abi"

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    defaultConfig {
        minSdkVersion parent.ext.androidMinSdkVersion
        targetSdkVersion parent.ext.androidTargetSdkVersion

        applicationId "org.sense.vlc"

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()

        multiDexEnabled true

        packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/services/javax.annotation.processing.Processor'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/jdom-info.xml'
        }

        //Set the build ABI according to build types only if not launched from compile.sh
        if (System.getenv('PASSWORD_KEYSTORE') == null)
            tasks.whenTaskAdded { task ->
                if (task.name.startsWith('assemble')) {
                    if (task.name.endsWith('ARMv5Debug'))
                        task.dependsOn(":libvlc:buildDebugARMv5")
                    else if (task.name.endsWith('ARMv6fpuDebug'))
                        task.dependsOn(":libvlc:buildDebugARMv6")
                    else if (task.name.endsWith('ARMv6nofpuDebug'))
                        task.dependsOn(":libvlc:buildDebugARMv6_nofpu")
                    else if (task.name.endsWith('ARMv7Debug'))
                        task.dependsOn(":libvlc:buildDebugARMv7")
                    else if (task.name.endsWith('ARMv8Debug'))
                        task.dependsOn(":libvlc:buildDebugARM64")
                    else if (task.name.endsWith('X86Debug'))
                        task.dependsOn(":libvlc:buildDebugx86")
                    else if (task.name.endsWith('X86_64Debug'))
                        task.dependsOn(":libvlc:buildDebugx86_64")
                    else if (task.name.endsWith('MIPSDebug'))
                        task.dependsOn(":libvlc:buildDebugMIPS")
                    else if (task.name.endsWith('MIPS64Debug'))
                        task.dependsOn(":libvlc:buildDebugMIPS64")
                }
            }
    }

    signingConfigs {

        release {
            /*
            To set this properties, create file gradle.properties with these 3 props.
            e.g.
            keyStoreFile=/home/<username>/.android/debug.keystore
            storealias=androiddebugkey
            storepwd=android
             */
            storeFile file(keyStoreFile)
            keyAlias storealias
            if (System.getenv('PASSWORD_KEYSTORE') != null && !System.getenv('PASSWORD_KEYSTORE').isEmpty()){
                storePassword = System.getenv('PASSWORD_KEYSTORE')
                keyPassword = System.getenv('PASSWORD_KEYSTORE')
            } else {
                storePassword storepwd
                keyPassword storepwd
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            proguardFile 'proguard.cfg'
        }
        debug {
            applicationIdSuffix ".debug"
            jniDebuggable true
        }
    }
    productFlavors {
        vanilla {
            dimension "target"
            versionCode = 0
            buildConfigField "boolean", "tv", "false"
        }
        tv {
            minSdkVersion 17
            dimension "target"
            versionCode = 1
            buildConfigField "boolean", "tv", "true"
        }
        chrome {
            minSdkVersion 21
            dimension "target"
            versionCode = 2
            buildConfigField "boolean", "tv", "false"
        }
        ARMv5 {
            dimension "abi"
            versionCode = 1
        }
        ARMv6nofpu {
            dimension "abi"
            versionCode = 2
        }
        ARMv6fpu {
            dimension "abi"
            versionCode = 3
        }
        ARMv7 {
            dimension "abi"
            versionCode = 4
        }
        x86 {
            dimension "abi"
            versionCode = 5
        }
        MIPS {
            dimension "abi"
            versionCode = 6
        }
        ARMv8 {
            dimension "abi"
            versionCode = 7
        }
        x86_64 {
            dimension "abi"
            versionCode = 8
        }
      //todo  MIPS64 {
        //    dimension "abi"
        //    versionCode = 9
      //  }
    }

    // make per-variant version code
    applicationVariants.all { variant ->
        def manifestParser = new com.android.builder.core.DefaultManifestParser()
        // get the version code of each flavor
        def vlcVersion = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
        def targetVersion = variant.productFlavors.get(0).versionCode
        def abiVersion = variant.productFlavors.get(1).versionCode

        // set the composite code
        variant.mergedFlavor.versionCode = targetVersion * 10000000 + manifestParser.getVersionCode(android.sourceSets.main.manifest.srcFile) + abiVersion
        variant.mergedFlavor.versionName = vlcVersion

        //Custom APK name
        variant.outputs.each { output ->
            def outputName = "VLC-Android-"
            if (!variant.productFlavors.get(0).name.equals("vanilla"))
                outputName += variant.productFlavors.get(0).name.toUpperCase()+"-"
            outputName += vlcVersion+"-"+variant.productFlavors.get(1).name+".apk"
            output.outputFile = new File(output.outputFile.parentFile, outputName);
        }
    }

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
    }
    sourceSets.test {
        java.srcDirs = ['test']
    }
    sourceSets.tv {
        manifest.srcFile 'tv/AndroidManifest.xml'
        java.srcDirs = ['tv/src']
        resources.srcDirs = ['tv/src']
        aidl.srcDirs = ['tv/src']
        renderscript.srcDirs = ['tv/src']
        res.srcDirs = ['tv/res']
        assets.srcDirs = ['tv/assets']
    }
}

dependencies {
   // testCompile 'junit:junit:4.12'

    compile parent.ext.libDaggerCompiler
    compile parent.ext.libDagger
    compile parent.ext.libAppCompat
    compile parent.ext.libAnnotations
    compile parent.ext.libV4support
    compile parent.ext.libnineoldandroids
    compile parent.ext.libRecyclerView
    compile parent.ext.libCardView
    compile parent.ext.libvlc
    compile parent.ext.libduckduckgo
    compile parent.ext.libresideMenu
    compile parent.ext.libcaffeine

    // compile parent.ext.libcaffeine
    compile 'com.android.support:design:22.2.0'

    tvCompile 'com.android.support:leanback-v17:22.1.1'

}

def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString()
}


apply plugin: 'maven'
group = 'org.sensi'
version = '0.1'

archivesBaseName = 'sensicationvlcmainlibrary'


uploadArchives {
    repositories {
        mavenDeployer {
            repository url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
        }
    }
}
task install(dependsOn: uploadArchives)

//...
//...
task ressourcesJar(type: Jar) {
    classifier = 'res'
    from android.sourceSets.main.res.sourceFiles
}
task javasourcesJar(type: Jar) {
    classifier = 'java'
    from android.sourceSets.main.java.sourceFiles
}
artifacts {
    archives ressourcesJar
    archives javasourcesJar
}
